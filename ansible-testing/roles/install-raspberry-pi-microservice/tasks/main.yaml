---
# name: "Check for required parameters"
# fail: 
#   msg="Variable '{{ item }}' is not defined"
# when: item not in hostvars[inventory_hostname]
# with_items:
#   - microservice_port
#   - microservice_name

- debug:
    var: microservice_name

- debug:
    var: microservice_port

- debug:
    var: garage_door_user

- name: "Check for nagios_passive_server"
  fail: 
    msg="Attempting to install nagios_passive_server not as user nagios"
  when: 
    - microservice_name == 'nagios_passive_check'
    - garage_door_user != 'nagios'

- name: Check the gpio group exists or create
  group:
    name: gpio
    state: present

- name: Create microservices user {{ garage_door_user }}
  user:
    name: "{{ garage_door_user }}"
    groups: gpio # to allow access to sensors
    append: yes
    state: present

- name: install prereq packages
  become: true
  apt: pkg={{item}}  state=installed update_cache=true
  with_items:
    - git
    - python-pip
    - python-virtualenv
    - python-dev

- name: Create virtual env with bottle
  pip:
    name: "{{ item }}"
    virtualenv_python: python2.7
    virtualenv: "/home/{{ garage_door_user }}/{{ microservice_name }}/virtual-env"
  with_items:
    - bottle
    - Rpi.GPIO

- name: Checkout microservices directory
  git:
    repo: https://github.com/avinash-oza/raspberry-pi-microservices.git
    dest: /home/{{ garage_door_user }}/{{ microservice_name }}/raspberry-pi-microservices
    force: true

- name: Check if extra dependencies are needed based on repo
  stat:
    path: "/home/{{ garage_door_user }}/{{ microservice_name }}/raspberry-pi-microservices/{{ microservice_name }}/requirements.txt"
  register: additional_requirements_file

- name: Install extra requirements
  pip:
    requirements: "{{ additional_requirements_file.stat.path }}"
    virtualenv_python: python2.7
    virtualenv: "/home/{{ garage_door_user }}/{{ microservice_name }}/virtual-env"
  when: additional_requirements_file.stat.exists == True

- name: Copy config and create config for {{ microservice_name }}
  template:
    backup: true
    src: "configs/{{ microservice_name }}.config"
    dest: "/home/{{ garage_door_user }}/{{ microservice_name }}/raspberry-pi-microservices/{{ microservice_name }}/{{ microservice_name }}.config"
    owner: "{{ garage_door_user }}"
    group: "{{ garage_door_user }}"
    mode: 0755

- name: Change ownership of all files to user
  file:
    path: "/home/{{ garage_door_user }}/{{ microservice_name }}"
    owner: "{{ garage_door_user }}"
    group: "{{ garage_door_user }}"
    state: directory
    recurse: yes

- name: Copy systemd file for starting service on boot
  become: yes
  template:
    src: "template_bottle.service"
    dest: "/etc/systemd/system/{{ microservice_name }}.service"
    mode: 0644

- name: reload systemd configs
  systemd:
    daemon_reload: yes

- name: Enable service to run on boot and start
  become: yes
  service:
    name: "{{ microservice_name }}.service"
    state: restarted
    enabled: true

- name: Load any required cron job
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ microservice_name }}.yaml"
    - "default.yaml"

- debug:
    var: cron_job


- name: Install cron job
  #TODO: Fix the user for become
  cron:
    name: "{{ microservice_name }}_job"
    backup: true
    minute: "*/2"
    job: "{{ cron_job }}"
    state: present
    user: deploy
  when: cron_job is defined
