---
- name: install nagios and plugins
  apt: 
    name: ['nagios4', 'nagios-plugins-contrib', 'python3-boto3']
    cache_valid_time: 1440

- name: Enable required apache modules
  apache2_module:
    name: "{{ item }}"
    state: present
    force: yes
    ignore_configcheck: yes
    
  with_items:
    - auth_digest
    - authz_groupfile
    - cgi

- name: set options to values
  lineinfile:
    dest: /etc/nagios4/nagios.cfg
    state: present
    regexp: "^{{ item.key }}"
    line: "{{ item.value }}"
  loop: "{{ options_to_values | dict2items }}"

  vars:
    options_to_values:
      use_syslog: "use_syslog=0"
      check_external_commands: "check_external_commands=1"
      log_passive_checks: "log_passive_checks=0"
      log_rotation_method: "log_rotation_method=d"
      log_external_commands: "log_external_commands=0"
      log_notifications: "log_notifications=0"
      log_event_handlers: "log_event_handlers=0"
      log_current_states: "log_current_states=0"
      enable_environment_macros: "enable_environment_macros=1"

# keep only one backup of the file
- name: delete stock config includes
  lineinfile:
    backup: true
    dest: /etc/nagios4/nagios.cfg
    regexp: '^cfg_file='
    state: absent

- name: add group for external commands
  group:
    name: "{{ nagios_command_group }}"
    state: present

- name: Add users to the nagcmd group
  user:
    name: "{{ item }}"
    groups: "{{ nagios_command_group }}" # for passive checks
    append: yes
    state: present
  with_items:
    - nagios
    - www-data

- name: set permissions for nagios4 spool
  file:
    path: /var/lib/nagios4/spool/
    state: directory
    owner: nagios
    group: "{{ nagios_command_group }}"

- name: copy over send_nagios_alert.sh
  include_role:
    name: copy-scripts
  vars:
    script_to_copy: send_nagios_alert.sh
    file_permissions: '0770'
    file_owner: nagios
    file_group: "{{ nagios_command_group }}"

- name: copy over send_sns_alert.py
  include_role:
    name: copy-scripts
  vars:
    script_to_copy: send_sns_alert.py
    file_permissions: '0644'
    file_owner: nagios
    file_group: "{{ nagios_command_group }}"

- name: copy over nagios configs
  tags: config
  template:
    backup: true
    src: "{{ item }}"
    dest: "/etc/nagios4/conf.d/{{ item | basename | regex_replace('\\.j2', '') }}"
  with_fileglob:
    - ../templates/conf.d/*

# name: set proper permissions on socket
# file:
#   state: file
#   path: "{{ nagios_command_file_path }}"
#   owner: nagios
#   group: "{{ nagios_command_group }}"
#   mode: "0770"

- name: set proper permissions on checkresults
  file:
    state: directory
    recurse: yes
    path: "{{ nagios_results_file_path }}"
    owner: nagios
    group: "{{ nagios_command_group }}"
    mode: "0770"

- name: copy over web config
  tags: config
  template:
    backup: true
    src: nagios4-cgi.conf.j2
    dest: /etc/apache2/conf-available/nagios4-cgi.conf

- name: copy over users file
  tags: config
  copy:
    src: htdigest.users
    dest: /etc/nagios4/htdigest.users
    user: nagios
    group: www-data


# name: Allow nagios user sudo access for plugins
# lineinfile:
#   dest: /etc/sudoers
#   state: present
#   regexp: '^nagios'
#   line: "nagios ALL=(ALL) NOPASSWD:/usr/lib/nagios/plugins/,{{ user_home_directory }}/home-projects/pi"
#   validate: 'visudo -cf %s'

- name: Restart nagios server
  service:
    name: nagios4
    state: restarted

- name: Add cron weekly message for uptime
  cron:
      name: "Weekly uptime"
      job: 'echo $(hostname) $(uptime) | AWS_DEFAULT_REGION={{ vault_aws_default_region }} AWS_ACCESS_KEY_ID={{ vault_aws_access_key_id }} AWS_SECRET_ACCESS_KEY={{ vault_aws_secret_access_key }} {{ python_root }}/{{ python_bin }} {{ scripts_dir }}/send_sns_alert.py --sns-arn={{ vault_nagios_alert_sns_endpoint }} --stdin'
      special_time: weekly
      state: present

- name: Add job to clean up archive logs
  cron:
      name: "Weekly nagios log archive cleanup"
      job: '/bin/rm -Rvf /var/log/nagios4/archives/*'
      special_time: weekly
      state: present

# name: Fetch public key to local machine
# fetch:
#   src: "{{ user_home_directory}}/.ssh/id_rsa.pub"
#   dest: "{{ playbook_dir }}/nagios_pub_key.pub"
#   fail_on_missing: yes
#   flat: yes

#TODO: handle copying over apache configs
- include_tasks: install-nrdp.yaml
